1. Personal Finance Manager
Skills Involved: Classes, JSON/CSV/SQLite3, Context Managers, Logging
Description: Build an application that tracks income and expenses. The app should allow users to add transactions,
 categorize them, and generate reports (e.g., monthly spending). Data should be saved in a SQLite3 database, and
 logs should be maintained for all transactions. You can extend it by adding features like budget tracking and
  forecasting future expenses.



 user object that can have its own account with attributes.
 save information in a data base.

 will need a context manager to save data to and from database
   Looks like you can use sqlite3 and have normalized databases with reference tables. this should work for accounts,
   transaction logging, and account details.
            Start thinking about how you want to structure your data. This is will important later.

Your going to need a random number generator for customer ID's. and then make sure that you dont have duplicates.

 menu
    - log in
        -username
        -password
            - account details
                -account list with totals.
                -transaction history
            - deposit
                -from account:
                    - how much
                        -account details before and after deposit
            - withdrawal
                -from account:
                    -how much
                        - account details before and after withdrawal
            - account options
                -change username
                -change password
                -delete account
                    - add requirements for account deletion (no money in account)
                    - make sure and admin has to approve of account deletion.
                -add verified user
            -
    -view options
        -admin options
        -user options

    -MarketWatch
        - Add utilities to look at current market state. can use indexes. possible start having a saved list* of stocks.
        - add portfolio management. Will need to use selenium to log into profiles and pull data from page.
    -exit


    user:
        accounts : [{account name: tester, account total: 123456(tester},
                    {account name: tester_2, account total: 123456(tester_2}]

        deposit [list of values]
        withdrawals[list of values]
        all transactions [list of values]
        --


    admin:

        --

 ######################################################################################################################

 think about how you want to set up classes and possible packages.

 packages(draft)
    -database handler
        classes
            - ???
    -context manager
        classes
            -ContextManager
    -account manipulation.
        classes
            -Account


Read me stuff****************************************************************
https://realpython.com/readme-python-project/

What was your motivation to build the project?
What problem does the project solve?
What technologies does the project use and why?
What are the project’s most relevant features?
How can users get started with the project?
Where can users get help with your project?

Project description: A short description of what your project does. A good way to do this right is to provide:
A concise paragraph describing your project
A representative screenshot or an animated GIF showing your project in action
Installation: A series of steps that describe how to install the project. If your project is cross-platform, then make
 sure you list the steps for all the supported platforms.
Execution and usage: The instructions for executing the project if it’s an executable Python application. If the project is a Python library, then you can provide some code examples of using the library. Ideally, you should provide examples that showcase the project’s most relevant features.
Used technologies: A list of used technologies, including third-party Python libraries and frameworks. You can provide a short description of each technology and, optionally, the reasons behind using it.
Current features: A list of current features. You can take advantage of this section to do some marketing around your project by highlighting its most relevant features.
Contributing: A series of steps for contributing to the project. Alternatively, you can create a dedicated contributor’s guide in a separate file, which is common practice in large projects.
Contributors: The list of people who have somehow contributed to your Python project. Crediting contributors is an excellent way to make open-source contributors feel like they’re part of a team effort.
Author’s info: The author’s name and contact information, such as social media accounts and email. This information will be handy for people who want to collaborate with you.
Change log: A condensed change log listing the changes made to the project compared to the previous version.
License: A quick statement about the license the software is under. You can include a LICENSE.txt file under your project’s root folder and then link to that file. For an open-source Python project, you could go to opensource.org and get the license that meets your needs.
